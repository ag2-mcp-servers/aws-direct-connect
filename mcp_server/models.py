# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:34:40+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ASN(RootModel[int]):
    root: int


class AddressFamily(Enum):
    ipv4 = 'ipv4'
    ipv6 = 'ipv6'


class AgreementName(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class AmazonAddress(RootModel[str]):
    root: str


class AssociatedGatewayId(RootModel[str]):
    root: str


class AwsDevice(RootModel[str]):
    root: str


class AwsDeviceV2(RootModel[str]):
    root: str


class AwsLogicalDeviceId(RootModel[str]):
    root: str


class BGPAuthKey(RootModel[str]):
    root: str


class BGPPeerId(RootModel[str]):
    root: str


class BGPPeerIdList(RootModel[List[BGPPeerId]]):
    root: List[BGPPeerId]


class BGPPeerState(Enum):
    verifying = 'verifying'
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class BGPStatus(Enum):
    up = 'up'
    down = 'down'
    unknown = 'unknown'


class Bandwidth(RootModel[str]):
    root: str


class BooleanFlag(RootModel[bool]):
    root: bool


class CIDR(RootModel[str]):
    root: str


class Cak(RootModel[str]):
    root: str


class Ckn(RootModel[str]):
    root: str


class ConfirmCustomerAgreementRequest(BaseModel):
    agreementName: Optional[AgreementName] = None


class ConnectionId(RootModel[str]):
    root: str


class ConnectionName(RootModel[str]):
    root: str


class ConnectionState(Enum):
    ordering = 'ordering'
    requested = 'requested'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    rejected = 'rejected'
    unknown = 'unknown'


class Count(RootModel[int]):
    root: int


class CustomerAddress(RootModel[str]):
    root: str


class DeleteConnectionRequest(BaseModel):
    connectionId: ConnectionId


class DescribeConnectionsRequest(BaseModel):
    connectionId: Optional[ConnectionId] = None


class DescribeHostedConnectionsRequest(BaseModel):
    connectionId: ConnectionId


class DirectConnectClientException(RootModel[Any]):
    root: Any


class DirectConnectGatewayAssociationId(RootModel[str]):
    root: str


class DirectConnectGatewayAssociationProposalId(RootModel[str]):
    root: str


class DirectConnectGatewayAssociationProposalState(Enum):
    requested = 'requested'
    accepted = 'accepted'
    deleted = 'deleted'


class DirectConnectGatewayAssociationState(Enum):
    associating = 'associating'
    associated = 'associated'
    disassociating = 'disassociating'
    disassociated = 'disassociated'
    updating = 'updating'


class DirectConnectGatewayAttachmentState(Enum):
    attaching = 'attaching'
    attached = 'attached'
    detaching = 'detaching'
    detached = 'detached'


class DirectConnectGatewayAttachmentType(Enum):
    TransitVirtualInterface = 'TransitVirtualInterface'
    PrivateVirtualInterface = 'PrivateVirtualInterface'


class DirectConnectGatewayId(RootModel[str]):
    root: str


class DirectConnectGatewayName(RootModel[str]):
    root: str


class DirectConnectGatewayState(Enum):
    pending = 'pending'
    available = 'available'
    deleting = 'deleting'
    deleted = 'deleted'


class DirectConnectServerException(RootModel[Any]):
    root: Any


class DuplicateTagKeysException(RootModel[Any]):
    root: Any


class EnableSiteLink(RootModel[bool]):
    root: bool


class EncryptionMode(RootModel[str]):
    root: str


class EndTime(RootModel[datetime]):
    root: datetime


class FailureTestHistoryStatus(RootModel[str]):
    root: str


class GatewayIdToAssociate(RootModel[str]):
    root: str


class GatewayIdentifier(RootModel[str]):
    root: str


class GatewayType(Enum):
    virtualPrivateGateway = 'virtualPrivateGateway'
    transitGateway = 'transitGateway'


class HasLogicalRedundancy(Enum):
    unknown = 'unknown'
    yes = 'yes'
    no = 'no'


class InterconnectId(RootModel[str]):
    root: str


class InterconnectName(RootModel[str]):
    root: str


class InterconnectState(Enum):
    requested = 'requested'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    unknown = 'unknown'


class JumboFrameCapable(RootModel[bool]):
    root: bool


class LagId(RootModel[str]):
    root: str


class LagName(RootModel[str]):
    root: str


class LagState(Enum):
    requested = 'requested'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    unknown = 'unknown'


class LoaContent(RootModel[str]):
    root: str


class LoaContentType(Enum):
    application_pdf = 'application/pdf'


class LoaIssueTime(RootModel[datetime]):
    root: datetime


class LocationCode(RootModel[str]):
    root: str


class LocationName(RootModel[str]):
    root: str


class LongAsn(RootModel[int]):
    root: int


class MTU(RootModel[int]):
    root: int


class MacSecCapable(RootModel[bool]):
    root: bool


class MaxResultSetSize(RootModel[int]):
    root: int


class NewBGPPeer(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None


class NniPartnerType(Enum):
    v1 = 'v1'
    v2 = 'v2'
    nonPartner = 'nonPartner'


class OwnerAccount(RootModel[str]):
    root: str


class PaginationToken(RootModel[str]):
    root: str


class PartnerName(RootModel[str]):
    root: str


class Platform(RootModel[str]):
    root: str


class PortEncryptionStatus(RootModel[str]):
    root: str


class PortSpeed(RootModel[str]):
    root: str


class ProviderName(RootModel[str]):
    root: str


class Region(RootModel[str]):
    root: str


class RequestMACSec(RootModel[bool]):
    root: bool


class ResourceArn(RootModel[str]):
    root: str


class ResourceArnList(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class RouteFilterPrefix(BaseModel):
    cidr: Optional[CIDR] = None


class RouteFilterPrefixList(RootModel[List[RouteFilterPrefix]]):
    root: List[RouteFilterPrefix]


class RouterConfig(RootModel[str]):
    root: str


class RouterTypeIdentifier(RootModel[str]):
    root: str


class SecretARN(RootModel[str]):
    root: str


class SiteLinkEnabled(RootModel[bool]):
    root: bool


class Software(RootModel[str]):
    root: str


class StartOnDate(RootModel[str]):
    root: str


class StartTime(RootModel[datetime]):
    root: datetime


class State(RootModel[str]):
    root: str


class StateChangeError(RootModel[str]):
    root: str


class Status(RootModel[constr(max_length=30)]):
    root: constr(max_length=30)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TestDuration(RootModel[int]):
    root: int


class TestId(RootModel[str]):
    root: str


class TooManyTagsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateConnectionRequest(BaseModel):
    connectionId: ConnectionId
    connectionName: Optional[ConnectionName] = None
    encryptionMode: Optional[EncryptionMode] = None


class UpdateDirectConnectGatewayAssociationRequest(BaseModel):
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    removeAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None


class UpdateDirectConnectGatewayRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId
    newDirectConnectGatewayName: DirectConnectGatewayName


class UpdateLagRequest(BaseModel):
    encryptionMode: Optional[EncryptionMode] = None
    lagId: LagId
    lagName: Optional[LagName] = None
    minimumLinks: Optional[Count] = None


class VLAN(RootModel[int]):
    root: int


class Vendor(RootModel[str]):
    root: str


class VirtualGatewayId(RootModel[str]):
    root: str


class VirtualGatewayRegion(RootModel[str]):
    root: str


class VirtualGatewayState(RootModel[str]):
    root: str


class VirtualInterfaceId(RootModel[str]):
    root: str


class VirtualInterfaceName(RootModel[str]):
    root: str


class VirtualInterfaceRegion(RootModel[str]):
    root: str


class VirtualInterfaceState(Enum):
    confirming = 'confirming'
    verifying = 'verifying'
    pending = 'pending'
    available = 'available'
    down = 'down'
    deleting = 'deleting'
    deleted = 'deleted'
    rejected = 'rejected'
    unknown = 'unknown'


class VirtualInterfaceTestHistory(BaseModel):
    bgpPeers: Optional[BGPPeerIdList] = None
    endTime: Optional[EndTime] = None
    ownerAccount: Optional[OwnerAccount] = None
    startTime: Optional[StartTime] = None
    status: Optional[FailureTestHistoryStatus] = None
    testDurationInMinutes: Optional[TestDuration] = None
    testId: Optional[TestId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class VirtualInterfaceTestHistoryList(RootModel[List[VirtualInterfaceTestHistory]]):
    root: List[VirtualInterfaceTestHistory]


class VirtualInterfaceType(RootModel[str]):
    root: str


class XsltTemplateName(RootModel[str]):
    root: str


class XsltTemplateNameForMacSec(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    OvertureService_AcceptDirectConnectGatewayAssociationProposal = (
        'OvertureService.AcceptDirectConnectGatewayAssociationProposal'
    )


class XAmzTarget1(Enum):
    OvertureService_AllocateConnectionOnInterconnect = (
        'OvertureService.AllocateConnectionOnInterconnect'
    )


class XAmzTarget2(Enum):
    OvertureService_AllocateHostedConnection = (
        'OvertureService.AllocateHostedConnection'
    )


class XAmzTarget3(Enum):
    OvertureService_AllocatePrivateVirtualInterface = (
        'OvertureService.AllocatePrivateVirtualInterface'
    )


class XAmzTarget4(Enum):
    OvertureService_AllocatePublicVirtualInterface = (
        'OvertureService.AllocatePublicVirtualInterface'
    )


class XAmzTarget5(Enum):
    OvertureService_AllocateTransitVirtualInterface = (
        'OvertureService.AllocateTransitVirtualInterface'
    )


class XAmzTarget6(Enum):
    OvertureService_AssociateConnectionWithLag = (
        'OvertureService.AssociateConnectionWithLag'
    )


class XAmzTarget7(Enum):
    OvertureService_AssociateHostedConnection = (
        'OvertureService.AssociateHostedConnection'
    )


class XAmzTarget8(Enum):
    OvertureService_AssociateMacSecKey = 'OvertureService.AssociateMacSecKey'


class XAmzTarget9(Enum):
    OvertureService_AssociateVirtualInterface = (
        'OvertureService.AssociateVirtualInterface'
    )


class XAmzTarget10(Enum):
    OvertureService_ConfirmConnection = 'OvertureService.ConfirmConnection'


class XAmzTarget11(Enum):
    OvertureService_ConfirmCustomerAgreement = (
        'OvertureService.ConfirmCustomerAgreement'
    )


class XAmzTarget12(Enum):
    OvertureService_ConfirmPrivateVirtualInterface = (
        'OvertureService.ConfirmPrivateVirtualInterface'
    )


class XAmzTarget13(Enum):
    OvertureService_ConfirmPublicVirtualInterface = (
        'OvertureService.ConfirmPublicVirtualInterface'
    )


class XAmzTarget14(Enum):
    OvertureService_ConfirmTransitVirtualInterface = (
        'OvertureService.ConfirmTransitVirtualInterface'
    )


class XAmzTarget15(Enum):
    OvertureService_CreateBGPPeer = 'OvertureService.CreateBGPPeer'


class XAmzTarget16(Enum):
    OvertureService_CreateConnection = 'OvertureService.CreateConnection'


class XAmzTarget17(Enum):
    OvertureService_CreateDirectConnectGateway = (
        'OvertureService.CreateDirectConnectGateway'
    )


class XAmzTarget18(Enum):
    OvertureService_CreateDirectConnectGatewayAssociation = (
        'OvertureService.CreateDirectConnectGatewayAssociation'
    )


class XAmzTarget19(Enum):
    OvertureService_CreateDirectConnectGatewayAssociationProposal = (
        'OvertureService.CreateDirectConnectGatewayAssociationProposal'
    )


class XAmzTarget20(Enum):
    OvertureService_CreateInterconnect = 'OvertureService.CreateInterconnect'


class XAmzTarget21(Enum):
    OvertureService_CreateLag = 'OvertureService.CreateLag'


class XAmzTarget22(Enum):
    OvertureService_CreatePrivateVirtualInterface = (
        'OvertureService.CreatePrivateVirtualInterface'
    )


class XAmzTarget23(Enum):
    OvertureService_CreatePublicVirtualInterface = (
        'OvertureService.CreatePublicVirtualInterface'
    )


class XAmzTarget24(Enum):
    OvertureService_CreateTransitVirtualInterface = (
        'OvertureService.CreateTransitVirtualInterface'
    )


class XAmzTarget25(Enum):
    OvertureService_DeleteBGPPeer = 'OvertureService.DeleteBGPPeer'


class XAmzTarget26(Enum):
    OvertureService_DeleteConnection = 'OvertureService.DeleteConnection'


class XAmzTarget27(Enum):
    OvertureService_DeleteDirectConnectGateway = (
        'OvertureService.DeleteDirectConnectGateway'
    )


class XAmzTarget28(Enum):
    OvertureService_DeleteDirectConnectGatewayAssociation = (
        'OvertureService.DeleteDirectConnectGatewayAssociation'
    )


class XAmzTarget29(Enum):
    OvertureService_DeleteDirectConnectGatewayAssociationProposal = (
        'OvertureService.DeleteDirectConnectGatewayAssociationProposal'
    )


class XAmzTarget30(Enum):
    OvertureService_DeleteInterconnect = 'OvertureService.DeleteInterconnect'


class XAmzTarget31(Enum):
    OvertureService_DeleteLag = 'OvertureService.DeleteLag'


class XAmzTarget32(Enum):
    OvertureService_DeleteVirtualInterface = 'OvertureService.DeleteVirtualInterface'


class XAmzTarget33(Enum):
    OvertureService_DescribeConnectionLoa = 'OvertureService.DescribeConnectionLoa'


class XAmzTarget34(Enum):
    OvertureService_DescribeConnections = 'OvertureService.DescribeConnections'


class XAmzTarget35(Enum):
    OvertureService_DescribeConnectionsOnInterconnect = (
        'OvertureService.DescribeConnectionsOnInterconnect'
    )


class XAmzTarget36(Enum):
    OvertureService_DescribeCustomerMetadata = (
        'OvertureService.DescribeCustomerMetadata'
    )


class XAmzTarget37(Enum):
    OvertureService_DescribeDirectConnectGatewayAssociationProposals = (
        'OvertureService.DescribeDirectConnectGatewayAssociationProposals'
    )


class XAmzTarget38(Enum):
    OvertureService_DescribeDirectConnectGatewayAssociations = (
        'OvertureService.DescribeDirectConnectGatewayAssociations'
    )


class XAmzTarget39(Enum):
    OvertureService_DescribeDirectConnectGatewayAttachments = (
        'OvertureService.DescribeDirectConnectGatewayAttachments'
    )


class XAmzTarget40(Enum):
    OvertureService_DescribeDirectConnectGateways = (
        'OvertureService.DescribeDirectConnectGateways'
    )


class XAmzTarget41(Enum):
    OvertureService_DescribeHostedConnections = (
        'OvertureService.DescribeHostedConnections'
    )


class XAmzTarget42(Enum):
    OvertureService_DescribeInterconnectLoa = 'OvertureService.DescribeInterconnectLoa'


class XAmzTarget43(Enum):
    OvertureService_DescribeInterconnects = 'OvertureService.DescribeInterconnects'


class XAmzTarget44(Enum):
    OvertureService_DescribeLags = 'OvertureService.DescribeLags'


class XAmzTarget45(Enum):
    OvertureService_DescribeLoa = 'OvertureService.DescribeLoa'


class XAmzTarget46(Enum):
    OvertureService_DescribeLocations = 'OvertureService.DescribeLocations'


class XAmzTarget47(Enum):
    OvertureService_DescribeRouterConfiguration = (
        'OvertureService.DescribeRouterConfiguration'
    )


class XAmzTarget48(Enum):
    OvertureService_DescribeTags = 'OvertureService.DescribeTags'


class XAmzTarget49(Enum):
    OvertureService_DescribeVirtualGateways = 'OvertureService.DescribeVirtualGateways'


class XAmzTarget50(Enum):
    OvertureService_DescribeVirtualInterfaces = (
        'OvertureService.DescribeVirtualInterfaces'
    )


class XAmzTarget51(Enum):
    OvertureService_DisassociateConnectionFromLag = (
        'OvertureService.DisassociateConnectionFromLag'
    )


class XAmzTarget52(Enum):
    OvertureService_DisassociateMacSecKey = 'OvertureService.DisassociateMacSecKey'


class XAmzTarget53(Enum):
    OvertureService_ListVirtualInterfaceTestHistory = (
        'OvertureService.ListVirtualInterfaceTestHistory'
    )


class XAmzTarget54(Enum):
    OvertureService_StartBgpFailoverTest = 'OvertureService.StartBgpFailoverTest'


class XAmzTarget55(Enum):
    OvertureService_StopBgpFailoverTest = 'OvertureService.StopBgpFailoverTest'


class XAmzTarget56(Enum):
    OvertureService_TagResource = 'OvertureService.TagResource'


class XAmzTarget57(Enum):
    OvertureService_UntagResource = 'OvertureService.UntagResource'


class XAmzTarget58(Enum):
    OvertureService_UpdateConnection = 'OvertureService.UpdateConnection'


class XAmzTarget59(Enum):
    OvertureService_UpdateDirectConnectGateway = (
        'OvertureService.UpdateDirectConnectGateway'
    )


class XAmzTarget60(Enum):
    OvertureService_UpdateDirectConnectGatewayAssociation = (
        'OvertureService.UpdateDirectConnectGatewayAssociation'
    )


class XAmzTarget61(Enum):
    OvertureService_UpdateLag = 'OvertureService.UpdateLag'


class XAmzTarget62(Enum):
    OvertureService_UpdateVirtualInterfaceAttributes = (
        'OvertureService.UpdateVirtualInterfaceAttributes'
    )


class AcceptDirectConnectGatewayAssociationProposalRequest(BaseModel):
    associatedGatewayOwnerAccount: OwnerAccount
    directConnectGatewayId: DirectConnectGatewayId
    overrideAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = (
        None
    )
    proposalId: DirectConnectGatewayAssociationProposalId


class AllocateConnectionOnInterconnectRequest(BaseModel):
    bandwidth: Bandwidth
    connectionName: ConnectionName
    interconnectId: InterconnectId
    ownerAccount: OwnerAccount
    vlan: VLAN


class AssociateConnectionWithLagRequest(BaseModel):
    connectionId: ConnectionId
    lagId: LagId


class AssociateHostedConnectionRequest(BaseModel):
    connectionId: ConnectionId
    parentConnectionId: ConnectionId


class AssociateMacSecKeyRequest(BaseModel):
    cak: Optional[Cak] = None
    ckn: Optional[Ckn] = None
    connectionId: ConnectionId
    secretARN: Optional[SecretARN] = None


class AssociateVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    virtualInterfaceId: VirtualInterfaceId


class AssociatedGateway(BaseModel):
    id: Optional[GatewayIdentifier] = None
    ownerAccount: Optional[OwnerAccount] = None
    region: Optional[Region] = None
    type: Optional[GatewayType] = None


class AvailableMacSecPortSpeeds(RootModel[List[PortSpeed]]):
    root: List[PortSpeed]


class AvailablePortSpeeds(RootModel[List[PortSpeed]]):
    root: List[PortSpeed]


class BGPPeer(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    bgpPeerId: Optional[BGPPeerId] = None
    bgpPeerState: Optional[BGPPeerState] = None
    bgpStatus: Optional[BGPStatus] = None
    customerAddress: Optional[CustomerAddress] = None


class BGPPeerList(RootModel[List[BGPPeer]]):
    root: List[BGPPeer]


class ConfirmConnectionRequest(BaseModel):
    connectionId: ConnectionId


class ConfirmConnectionResponse(BaseModel):
    connectionState: Optional[ConnectionState] = None


class ConfirmCustomerAgreementResponse(BaseModel):
    status: Optional[Status] = None


class ConfirmPrivateVirtualInterfaceRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualInterfaceId: VirtualInterfaceId


class ConfirmPrivateVirtualInterfaceResponse(BaseModel):
    virtualInterfaceState: Optional[VirtualInterfaceState] = None


class ConfirmPublicVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class ConfirmPublicVirtualInterfaceResponse(BaseModel):
    virtualInterfaceState: Optional[VirtualInterfaceState] = None


class ConfirmTransitVirtualInterfaceRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId
    virtualInterfaceId: VirtualInterfaceId


class ConfirmTransitVirtualInterfaceResponse(BaseModel):
    virtualInterfaceState: Optional[VirtualInterfaceState] = None


class CreateBGPPeerRequest(BaseModel):
    newBGPPeer: Optional[NewBGPPeer] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class CreateDirectConnectGatewayAssociationProposalRequest(BaseModel):
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    directConnectGatewayId: DirectConnectGatewayId
    directConnectGatewayOwnerAccount: OwnerAccount
    gatewayId: GatewayIdToAssociate
    removeAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None


class CreateDirectConnectGatewayAssociationRequest(BaseModel):
    addAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    directConnectGatewayId: DirectConnectGatewayId
    gatewayId: Optional[GatewayIdToAssociate] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class CreateDirectConnectGatewayRequest(BaseModel):
    amazonSideAsn: Optional[LongAsn] = None
    directConnectGatewayName: DirectConnectGatewayName


class CustomerAgreement(BaseModel):
    agreementName: Optional[AgreementName] = None
    status: Optional[Status] = None


class DeleteBGPPeerRequest(BaseModel):
    asn: Optional[ASN] = None
    bgpPeerId: Optional[BGPPeerId] = None
    customerAddress: Optional[CustomerAddress] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class DeleteDirectConnectGatewayAssociationProposalRequest(BaseModel):
    proposalId: DirectConnectGatewayAssociationProposalId


class DeleteDirectConnectGatewayAssociationRequest(BaseModel):
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class DeleteDirectConnectGatewayRequest(BaseModel):
    directConnectGatewayId: DirectConnectGatewayId


class DeleteInterconnectRequest(BaseModel):
    interconnectId: InterconnectId


class DeleteInterconnectResponse(BaseModel):
    interconnectState: Optional[InterconnectState] = None


class DeleteLagRequest(BaseModel):
    lagId: LagId


class DeleteVirtualInterfaceRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class DeleteVirtualInterfaceResponse(BaseModel):
    virtualInterfaceState: Optional[VirtualInterfaceState] = None


class DescribeConnectionLoaRequest(BaseModel):
    connectionId: ConnectionId
    loaContentType: Optional[LoaContentType] = None
    providerName: Optional[ProviderName] = None


class DescribeConnectionsOnInterconnectRequest(BaseModel):
    interconnectId: InterconnectId


class DescribeDirectConnectGatewayAssociationProposalsRequest(BaseModel):
    associatedGatewayId: Optional[AssociatedGatewayId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None
    proposalId: Optional[DirectConnectGatewayAssociationProposalId] = None


class DescribeDirectConnectGatewayAssociationsRequest(BaseModel):
    associatedGatewayId: Optional[AssociatedGatewayId] = None
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None


class DescribeDirectConnectGatewayAttachmentsRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class DescribeDirectConnectGatewaysRequest(BaseModel):
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None


class DescribeInterconnectLoaRequest(BaseModel):
    interconnectId: InterconnectId
    loaContentType: Optional[LoaContentType] = None
    providerName: Optional[ProviderName] = None


class DescribeInterconnectsRequest(BaseModel):
    interconnectId: Optional[InterconnectId] = None


class DescribeLagsRequest(BaseModel):
    lagId: Optional[LagId] = None


class DescribeLoaRequest(BaseModel):
    connectionId: ConnectionId
    loaContentType: Optional[LoaContentType] = None
    providerName: Optional[ProviderName] = None


class DescribeRouterConfigurationRequest(BaseModel):
    routerTypeIdentifier: Optional[RouterTypeIdentifier] = None
    virtualInterfaceId: VirtualInterfaceId


class DescribeTagsRequest(BaseModel):
    resourceArns: ResourceArnList


class DescribeVirtualInterfacesRequest(BaseModel):
    connectionId: Optional[ConnectionId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class DirectConnectGateway(BaseModel):
    amazonSideAsn: Optional[LongAsn] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayName: Optional[DirectConnectGatewayName] = None
    directConnectGatewayState: Optional[DirectConnectGatewayState] = None
    ownerAccount: Optional[OwnerAccount] = None
    stateChangeError: Optional[StateChangeError] = None


class DirectConnectGatewayAssociation(BaseModel):
    allowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = None
    associatedGateway: Optional[AssociatedGateway] = None
    associationId: Optional[DirectConnectGatewayAssociationId] = None
    associationState: Optional[DirectConnectGatewayAssociationState] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayOwnerAccount: Optional[OwnerAccount] = None
    stateChangeError: Optional[StateChangeError] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualGatewayOwnerAccount: Optional[OwnerAccount] = None
    virtualGatewayRegion: Optional[VirtualGatewayRegion] = None


class DirectConnectGatewayAssociationList(
    RootModel[List[DirectConnectGatewayAssociation]]
):
    root: List[DirectConnectGatewayAssociation]


class DirectConnectGatewayAssociationProposal(BaseModel):
    associatedGateway: Optional[AssociatedGateway] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    directConnectGatewayOwnerAccount: Optional[OwnerAccount] = None
    existingAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = (
        None
    )
    proposalId: Optional[DirectConnectGatewayAssociationProposalId] = None
    proposalState: Optional[DirectConnectGatewayAssociationProposalState] = None
    requestedAllowedPrefixesToDirectConnectGateway: Optional[RouteFilterPrefixList] = (
        None
    )


class DirectConnectGatewayAssociationProposalList(
    RootModel[List[DirectConnectGatewayAssociationProposal]]
):
    root: List[DirectConnectGatewayAssociationProposal]


class DirectConnectGatewayAttachment(BaseModel):
    attachmentState: Optional[DirectConnectGatewayAttachmentState] = None
    attachmentType: Optional[DirectConnectGatewayAttachmentType] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    stateChangeError: Optional[StateChangeError] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    virtualInterfaceOwnerAccount: Optional[OwnerAccount] = None
    virtualInterfaceRegion: Optional[VirtualInterfaceRegion] = None


class DirectConnectGatewayAttachmentList(
    RootModel[List[DirectConnectGatewayAttachment]]
):
    root: List[DirectConnectGatewayAttachment]


class DirectConnectGatewayList(RootModel[List[DirectConnectGateway]]):
    root: List[DirectConnectGateway]


class DisassociateConnectionFromLagRequest(BaseModel):
    connectionId: ConnectionId
    lagId: LagId


class DisassociateMacSecKeyRequest(BaseModel):
    connectionId: ConnectionId
    secretARN: SecretARN


class ListVirtualInterfaceTestHistoryRequest(BaseModel):
    bgpPeers: Optional[BGPPeerIdList] = None
    maxResults: Optional[MaxResultSetSize] = None
    nextToken: Optional[PaginationToken] = None
    status: Optional[FailureTestHistoryStatus] = None
    testId: Optional[TestId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None


class ListVirtualInterfaceTestHistoryResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    virtualInterfaceTestHistory: Optional[VirtualInterfaceTestHistoryList] = None


class Loa(BaseModel):
    loaContent: Optional[LoaContent] = None
    loaContentType: Optional[LoaContentType] = None


class MacSecKey(BaseModel):
    ckn: Optional[Ckn] = None
    secretARN: Optional[SecretARN] = None
    startOn: Optional[StartOnDate] = None
    state: Optional[State] = None


class MacSecKeyList(RootModel[List[MacSecKey]]):
    root: List[MacSecKey]


class ProviderList(RootModel[List[ProviderName]]):
    root: List[ProviderName]


class RouterType(BaseModel):
    platform: Optional[Platform] = None
    routerTypeIdentifier: Optional[RouterTypeIdentifier] = None
    software: Optional[Software] = None
    vendor: Optional[Vendor] = None
    xsltTemplateName: Optional[XsltTemplateName] = None
    xsltTemplateNameForMacSec: Optional[XsltTemplateNameForMacSec] = None


class StartBgpFailoverTestRequest(BaseModel):
    bgpPeers: Optional[BGPPeerIdList] = None
    testDurationInMinutes: Optional[TestDuration] = None
    virtualInterfaceId: VirtualInterfaceId


class StartBgpFailoverTestResponse(BaseModel):
    virtualInterfaceTest: Optional[VirtualInterfaceTestHistory] = None


class StopBgpFailoverTestRequest(BaseModel):
    virtualInterfaceId: VirtualInterfaceId


class StopBgpFailoverTestResponse(BaseModel):
    virtualInterfaceTest: Optional[VirtualInterfaceTestHistory] = None


class Tag(BaseModel):
    key: TagKey
    value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., min_length=1)


class TagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tags: TagList


class UpdateDirectConnectGatewayAssociationResult(BaseModel):
    directConnectGatewayAssociation: Optional[DirectConnectGatewayAssociation] = None


class UpdateDirectConnectGatewayResponse(BaseModel):
    directConnectGateway: Optional[DirectConnectGateway] = None


class UpdateVirtualInterfaceAttributesRequest(BaseModel):
    enableSiteLink: Optional[EnableSiteLink] = None
    mtu: Optional[MTU] = None
    virtualInterfaceId: VirtualInterfaceId
    virtualInterfaceName: Optional[VirtualInterfaceName] = None


class VirtualGateway(BaseModel):
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualGatewayState: Optional[VirtualGatewayState] = None


class VirtualGatewayList(RootModel[List[VirtualGateway]]):
    root: List[VirtualGateway]


class VirtualGateways(BaseModel):
    virtualGateways: Optional[VirtualGatewayList] = None


class VirtualInterface(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    amazonSideAsn: Optional[LongAsn] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    bgpPeers: Optional[BGPPeerList] = None
    connectionId: Optional[ConnectionId] = None
    customerAddress: Optional[CustomerAddress] = None
    customerRouterConfig: Optional[RouterConfig] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    location: Optional[LocationCode] = None
    mtu: Optional[MTU] = None
    ownerAccount: Optional[OwnerAccount] = None
    region: Optional[Region] = None
    routeFilterPrefixes: Optional[RouteFilterPrefixList] = None
    siteLinkEnabled: Optional[SiteLinkEnabled] = None
    tags: Optional[TagList] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    virtualInterfaceState: Optional[VirtualInterfaceState] = None
    virtualInterfaceType: Optional[VirtualInterfaceType] = None
    vlan: Optional[VLAN] = None


class VirtualInterfaceList(RootModel[List[VirtualInterface]]):
    root: List[VirtualInterface]


class VirtualInterfaces(BaseModel):
    virtualInterfaces: Optional[VirtualInterfaceList] = None


class AcceptDirectConnectGatewayAssociationProposalResult(BaseModel):
    directConnectGatewayAssociation: Optional[DirectConnectGatewayAssociation] = None


class AgreementList(RootModel[List[CustomerAgreement]]):
    root: List[CustomerAgreement]


class AllocateHostedConnectionRequest(BaseModel):
    bandwidth: Bandwidth
    connectionId: ConnectionId
    connectionName: ConnectionName
    ownerAccount: OwnerAccount
    tags: Optional[TagList] = None
    vlan: VLAN


class AllocateTransitVirtualInterfaceResult(BaseModel):
    virtualInterface: Optional[VirtualInterface] = None


class AssociateMacSecKeyResponse(BaseModel):
    connectionId: Optional[ConnectionId] = None
    macSecKeys: Optional[MacSecKeyList] = None


class Connection(BaseModel):
    awsDevice: Optional[AwsDevice] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    bandwidth: Optional[Bandwidth] = None
    connectionId: Optional[ConnectionId] = None
    connectionName: Optional[ConnectionName] = None
    connectionState: Optional[ConnectionState] = None
    encryptionMode: Optional[EncryptionMode] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    lagId: Optional[LagId] = None
    loaIssueTime: Optional[LoaIssueTime] = None
    location: Optional[LocationCode] = None
    macSecCapable: Optional[MacSecCapable] = None
    macSecKeys: Optional[MacSecKeyList] = None
    ownerAccount: Optional[OwnerAccount] = None
    partnerName: Optional[PartnerName] = None
    portEncryptionStatus: Optional[PortEncryptionStatus] = None
    providerName: Optional[ProviderName] = None
    region: Optional[Region] = None
    tags: Optional[TagList] = None
    vlan: Optional[VLAN] = None


class ConnectionList(RootModel[List[Connection]]):
    root: List[Connection]


class Connections(BaseModel):
    connections: Optional[ConnectionList] = None


class CreateBGPPeerResponse(BaseModel):
    virtualInterface: Optional[VirtualInterface] = None


class CreateConnectionRequest(BaseModel):
    bandwidth: Bandwidth
    connectionName: ConnectionName
    lagId: Optional[LagId] = None
    location: LocationCode
    providerName: Optional[ProviderName] = None
    requestMACSec: Optional[RequestMACSec] = None
    tags: Optional[TagList] = None


class CreateDirectConnectGatewayAssociationProposalResult(BaseModel):
    directConnectGatewayAssociationProposal: Optional[
        DirectConnectGatewayAssociationProposal
    ] = None


class CreateDirectConnectGatewayAssociationResult(BaseModel):
    directConnectGatewayAssociation: Optional[DirectConnectGatewayAssociation] = None


class CreateDirectConnectGatewayResult(BaseModel):
    directConnectGateway: Optional[DirectConnectGateway] = None


class CreateInterconnectRequest(BaseModel):
    bandwidth: Bandwidth
    interconnectName: InterconnectName
    lagId: Optional[LagId] = None
    location: LocationCode
    providerName: Optional[ProviderName] = None
    tags: Optional[TagList] = None


class CreateLagRequest(BaseModel):
    childConnectionTags: Optional[TagList] = None
    connectionId: Optional[ConnectionId] = None
    connectionsBandwidth: Bandwidth
    lagName: LagName
    location: LocationCode
    numberOfConnections: Count
    providerName: Optional[ProviderName] = None
    requestMACSec: Optional[RequestMACSec] = None
    tags: Optional[TagList] = None


class CreateTransitVirtualInterfaceResult(BaseModel):
    virtualInterface: Optional[VirtualInterface] = None


class DeleteBGPPeerResponse(BaseModel):
    virtualInterface: Optional[VirtualInterface] = None


class DeleteDirectConnectGatewayAssociationProposalResult(BaseModel):
    directConnectGatewayAssociationProposal: Optional[
        DirectConnectGatewayAssociationProposal
    ] = None


class DeleteDirectConnectGatewayAssociationResult(BaseModel):
    directConnectGatewayAssociation: Optional[DirectConnectGatewayAssociation] = None


class DeleteDirectConnectGatewayResult(BaseModel):
    directConnectGateway: Optional[DirectConnectGateway] = None


class DescribeConnectionLoaResponse(BaseModel):
    loa: Optional[Loa] = None


class DescribeCustomerMetadataResponse(BaseModel):
    agreements: Optional[AgreementList] = None
    nniPartnerType: Optional[NniPartnerType] = None


class DescribeDirectConnectGatewayAssociationProposalsResult(BaseModel):
    directConnectGatewayAssociationProposals: Optional[
        DirectConnectGatewayAssociationProposalList
    ] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewayAssociationsResult(BaseModel):
    directConnectGatewayAssociations: Optional[DirectConnectGatewayAssociationList] = (
        None
    )
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewayAttachmentsResult(BaseModel):
    directConnectGatewayAttachments: Optional[DirectConnectGatewayAttachmentList] = None
    nextToken: Optional[PaginationToken] = None


class DescribeDirectConnectGatewaysResult(BaseModel):
    directConnectGateways: Optional[DirectConnectGatewayList] = None
    nextToken: Optional[PaginationToken] = None


class DescribeInterconnectLoaResponse(BaseModel):
    loa: Optional[Loa] = None


class DescribeRouterConfigurationResponse(BaseModel):
    customerRouterConfig: Optional[RouterConfig] = None
    router: Optional[RouterType] = None
    virtualInterfaceId: Optional[VirtualInterfaceId] = None
    virtualInterfaceName: Optional[VirtualInterfaceName] = None


class DisassociateMacSecKeyResponse(BaseModel):
    connectionId: Optional[ConnectionId] = None
    macSecKeys: Optional[MacSecKeyList] = None


class Interconnect(BaseModel):
    awsDevice: Optional[AwsDevice] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    bandwidth: Optional[Bandwidth] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    interconnectId: Optional[InterconnectId] = None
    interconnectName: Optional[InterconnectName] = None
    interconnectState: Optional[InterconnectState] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    lagId: Optional[LagId] = None
    loaIssueTime: Optional[LoaIssueTime] = None
    location: Optional[LocationCode] = None
    providerName: Optional[ProviderName] = None
    region: Optional[Region] = None
    tags: Optional[TagList] = None


class InterconnectList(RootModel[List[Interconnect]]):
    root: List[Interconnect]


class Interconnects(BaseModel):
    interconnects: Optional[InterconnectList] = None


class Lag(BaseModel):
    allowsHostedConnections: Optional[BooleanFlag] = None
    awsDevice: Optional[AwsDevice] = None
    awsDeviceV2: Optional[AwsDeviceV2] = None
    awsLogicalDeviceId: Optional[AwsLogicalDeviceId] = None
    connections: Optional[ConnectionList] = None
    connectionsBandwidth: Optional[Bandwidth] = None
    encryptionMode: Optional[EncryptionMode] = None
    hasLogicalRedundancy: Optional[HasLogicalRedundancy] = None
    jumboFrameCapable: Optional[JumboFrameCapable] = None
    lagId: Optional[LagId] = None
    lagName: Optional[LagName] = None
    lagState: Optional[LagState] = None
    location: Optional[LocationCode] = None
    macSecCapable: Optional[MacSecCapable] = None
    macSecKeys: Optional[MacSecKeyList] = None
    minimumLinks: Optional[Count] = None
    numberOfConnections: Optional[Count] = None
    ownerAccount: Optional[OwnerAccount] = None
    providerName: Optional[ProviderName] = None
    region: Optional[Region] = None
    tags: Optional[TagList] = None


class LagList(RootModel[List[Lag]]):
    root: List[Lag]


class Lags(BaseModel):
    lags: Optional[LagList] = None


class Location(BaseModel):
    availableMacSecPortSpeeds: Optional[AvailableMacSecPortSpeeds] = None
    availablePortSpeeds: Optional[AvailablePortSpeeds] = None
    availableProviders: Optional[ProviderList] = None
    locationCode: Optional[LocationCode] = None
    locationName: Optional[LocationName] = None
    region: Optional[Region] = None


class LocationList(RootModel[List[Location]]):
    root: List[Location]


class Locations(BaseModel):
    locations: Optional[LocationList] = None


class NewPrivateVirtualInterface(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: ASN
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    enableSiteLink: Optional[EnableSiteLink] = None
    mtu: Optional[MTU] = None
    tags: Optional[TagList] = None
    virtualGatewayId: Optional[VirtualGatewayId] = None
    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN


class NewPrivateVirtualInterfaceAllocation(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: ASN
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    mtu: Optional[MTU] = None
    tags: Optional[TagList] = None
    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN


class NewPublicVirtualInterface(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: ASN
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    routeFilterPrefixes: Optional[RouteFilterPrefixList] = None
    tags: Optional[TagList] = None
    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN


class NewPublicVirtualInterfaceAllocation(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: ASN
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    routeFilterPrefixes: Optional[RouteFilterPrefixList] = None
    tags: Optional[TagList] = None
    virtualInterfaceName: VirtualInterfaceName
    vlan: VLAN


class NewTransitVirtualInterface(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    directConnectGatewayId: Optional[DirectConnectGatewayId] = None
    enableSiteLink: Optional[EnableSiteLink] = None
    mtu: Optional[MTU] = None
    tags: Optional[TagList] = None
    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    vlan: Optional[VLAN] = None


class NewTransitVirtualInterfaceAllocation(BaseModel):
    addressFamily: Optional[AddressFamily] = None
    amazonAddress: Optional[AmazonAddress] = None
    asn: Optional[ASN] = None
    authKey: Optional[BGPAuthKey] = None
    customerAddress: Optional[CustomerAddress] = None
    mtu: Optional[MTU] = None
    tags: Optional[TagList] = None
    virtualInterfaceName: Optional[VirtualInterfaceName] = None
    vlan: Optional[VLAN] = None


class ResourceTag(BaseModel):
    resourceArn: Optional[ResourceArn] = None
    tags: Optional[TagList] = None


class ResourceTagList(RootModel[List[ResourceTag]]):
    root: List[ResourceTag]


class AllocatePrivateVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation
    ownerAccount: OwnerAccount


class AllocatePublicVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation
    ownerAccount: OwnerAccount


class AllocateTransitVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newTransitVirtualInterfaceAllocation: NewTransitVirtualInterfaceAllocation
    ownerAccount: OwnerAccount


class CreatePrivateVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPrivateVirtualInterface: NewPrivateVirtualInterface


class CreatePublicVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newPublicVirtualInterface: NewPublicVirtualInterface


class CreateTransitVirtualInterfaceRequest(BaseModel):
    connectionId: ConnectionId
    newTransitVirtualInterface: NewTransitVirtualInterface


class DescribeTagsResponse(BaseModel):
    resourceTags: Optional[ResourceTagList] = None
